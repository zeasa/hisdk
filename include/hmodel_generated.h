// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HMODEL_HISDK_HMODEL_H_
#define FLATBUFFERS_GENERATED_HMODEL_HISDK_HMODEL_H_

#include "flatbuffers/flatbuffers.h"

namespace hisdk {
namespace hmodel {

struct Version;

struct Blob;

struct MemoryListEntry;

struct TaskListEntry;

struct AddressListEntry;

struct HModel;

enum Interface {
  Interface_NONE = 0,
  Interface_GPU = 1,
  Interface_CPU = 2,
  Interface_MIN = Interface_NONE,
  Interface_MAX = Interface_CPU
};

inline const char **EnumNamesInterface() {
  static const char *names[] = {
    "NONE",
    "GPU",
    "CPU",
    nullptr
  };
  return names;
}

inline const char *EnumNameInterface(Interface e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesInterface()[index];
}

enum HModelVersionMain {
  HModelVersionMain_VAL = 0,
  HModelVersionMain_MIN = HModelVersionMain_VAL,
  HModelVersionMain_MAX = HModelVersionMain_VAL
};

inline const char **EnumNamesHModelVersionMain() {
  static const char *names[] = {
    "VAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameHModelVersionMain(HModelVersionMain e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesHModelVersionMain()[index];
}

enum HModelVersionSub {
  HModelVersionSub_VAL = 7,
  HModelVersionSub_MIN = HModelVersionSub_VAL,
  HModelVersionSub_MAX = HModelVersionSub_VAL
};

inline const char **EnumNamesHModelVersionSub() {
  static const char *names[] = {
    "VAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameHModelVersionSub(HModelVersionSub e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(HModelVersionSub_VAL);
  return EnumNamesHModelVersionSub()[index];
}

enum HModelVersionSubMinor {
  HModelVersionSubMinor_VAL = 0,
  HModelVersionSubMinor_MIN = HModelVersionSubMinor_VAL,
  HModelVersionSubMinor_MAX = HModelVersionSubMinor_VAL
};

inline const char **EnumNamesHModelVersionSubMinor() {
  static const char *names[] = {
    "VAL",
    nullptr
  };
  return names;
}

inline const char *EnumNameHModelVersionSubMinor(HModelVersionSubMinor e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesHModelVersionSubMinor()[index];
}

enum MemoryDomain {
  MemoryDomain_GMEM = 0,
  MemoryDomain_MRAB = 1,
  MemoryDomain_MIN = MemoryDomain_GMEM,
  MemoryDomain_MAX = MemoryDomain_MRAB
};

inline const char **EnumNamesMemoryDomain() {
  static const char *names[] = {
    "GMEM",
    "MRAB",
    nullptr
  };
  return names;
}

inline const char *EnumNameMemoryDomain(MemoryDomain e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMemoryDomain()[index];
}

enum MemoryFlags {
  MemoryFlags_NONE = 0,
  MemoryFlags_ALLOC = 1,
  MemoryFlags_SET = 2,
  MemoryFlags_INPUT = 4,
  MemoryFlags_OUTPUT = 8,
  MemoryFlags_MIN = MemoryFlags_NONE,
  MemoryFlags_MAX = MemoryFlags_OUTPUT
};

inline const char **EnumNamesMemoryFlags() {
  static const char *names[] = {
    "NONE",
    "ALLOC",
    "SET",
    "",
    "INPUT",
    "",
    "",
    "",
    "OUTPUT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMemoryFlags(MemoryFlags e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMemoryFlags()[index];
}

MANUALLY_ALIGNED_STRUCT(1) Version FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t main_;
  uint8_t sub_;
  uint8_t sub_minor_;

 public:
  Version() {
    memset(this, 0, sizeof(Version));
  }
  Version(const Version &_o) {
    memcpy(this, &_o, sizeof(Version));
  }
  Version(uint8_t _main, uint8_t _sub, uint8_t _sub_minor)
      : main_(flatbuffers::EndianScalar(_main)),
        sub_(flatbuffers::EndianScalar(_sub)),
        sub_minor_(flatbuffers::EndianScalar(_sub_minor)) {
  }
  uint8_t main() const {
    return flatbuffers::EndianScalar(main_);
  }
  uint8_t sub() const {
    return flatbuffers::EndianScalar(sub_);
  }
  uint8_t sub_minor() const {
    return flatbuffers::EndianScalar(sub_minor_);
  }
};
STRUCT_END(Version, 3);

struct Blob FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_SIZE = 6,
    VT_INTERFACE = 8,
    VT_TYPE = 10,
    VT_VERSION = 12,
    VT_DATA = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  Interface interface() const {
    return static_cast<Interface>(GetField<uint32_t>(VT_INTERFACE, 0));
  }
  uint32_t type() const {
    return GetField<uint32_t>(VT_TYPE, 0);
  }
  const Version *version() const {
    return GetStruct<const Version *>(VT_VERSION);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           VerifyField<uint32_t>(verifier, VT_INTERFACE) &&
           VerifyField<uint32_t>(verifier, VT_TYPE) &&
           VerifyField<Version>(verifier, VT_VERSION) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct BlobBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Blob::VT_NAME, name);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(Blob::VT_SIZE, size, 0);
  }
  void add_interface(Interface interface) {
    fbb_.AddElement<uint32_t>(Blob::VT_INTERFACE, static_cast<uint32_t>(interface), 0);
  }
  void add_type(uint32_t type) {
    fbb_.AddElement<uint32_t>(Blob::VT_TYPE, type, 0);
  }
  void add_version(const Version *version) {
    fbb_.AddStruct(Blob::VT_VERSION, version);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Blob::VT_DATA, data);
  }
  BlobBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BlobBuilder &operator=(const BlobBuilder &);
  flatbuffers::Offset<Blob> Finish() {
    const auto end = fbb_.EndTable(start_, 6);
    auto o = flatbuffers::Offset<Blob>(end);
    return o;
  }
};

inline flatbuffers::Offset<Blob> CreateBlob(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t size = 0,
    Interface interface = Interface_NONE,
    uint32_t type = 0,
    const Version *version = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  BlobBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_data(data);
  builder_.add_version(version);
  builder_.add_type(type);
  builder_.add_interface(interface);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Blob> CreateBlobDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t size = 0,
    Interface interface = Interface_NONE,
    uint32_t type = 0,
    const Version *version = 0,
    const std::vector<uint8_t> *data = nullptr) {
  return hisdk::hmodel::CreateBlob(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      size,
      interface,
      type,
      version,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct MemoryListEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_DOMAIN = 6,
    VT_FLAGS = 8,
    VT_SIZE = 10,
    VT_ALIGNMENT = 12,
    VT_CONTENTS = 14,
    VT_OFFSETS = 16
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  MemoryDomain domain() const {
    return static_cast<MemoryDomain>(GetField<uint32_t>(VT_DOMAIN, 0));
  }
  MemoryFlags flags() const {
    return static_cast<MemoryFlags>(GetField<uint32_t>(VT_FLAGS, 0));
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  uint32_t alignment() const {
    return GetField<uint32_t>(VT_ALIGNMENT, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *contents() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CONTENTS);
  }
  const flatbuffers::Vector<uint64_t> *offsets() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_OFFSETS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_DOMAIN) &&
           VerifyField<uint32_t>(verifier, VT_FLAGS) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           VerifyField<uint32_t>(verifier, VT_ALIGNMENT) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CONTENTS) &&
           verifier.Verify(contents()) &&
           verifier.VerifyVectorOfStrings(contents()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OFFSETS) &&
           verifier.Verify(offsets()) &&
           verifier.EndTable();
  }
};

struct MemoryListEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(MemoryListEntry::VT_ID, id, 0);
  }
  void add_domain(MemoryDomain domain) {
    fbb_.AddElement<uint32_t>(MemoryListEntry::VT_DOMAIN, static_cast<uint32_t>(domain), 0);
  }
  void add_flags(MemoryFlags flags) {
    fbb_.AddElement<uint32_t>(MemoryListEntry::VT_FLAGS, static_cast<uint32_t>(flags), 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(MemoryListEntry::VT_SIZE, size, 0);
  }
  void add_alignment(uint32_t alignment) {
    fbb_.AddElement<uint32_t>(MemoryListEntry::VT_ALIGNMENT, alignment, 0);
  }
  void add_contents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> contents) {
    fbb_.AddOffset(MemoryListEntry::VT_CONTENTS, contents);
  }
  void add_offsets(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> offsets) {
    fbb_.AddOffset(MemoryListEntry::VT_OFFSETS, offsets);
  }
  MemoryListEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MemoryListEntryBuilder &operator=(const MemoryListEntryBuilder &);
  flatbuffers::Offset<MemoryListEntry> Finish() {
    const auto end = fbb_.EndTable(start_, 7);
    auto o = flatbuffers::Offset<MemoryListEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<MemoryListEntry> CreateMemoryListEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    MemoryDomain domain = MemoryDomain_GMEM,
    MemoryFlags flags = MemoryFlags_NONE,
    uint64_t size = 0,
    uint32_t alignment = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> contents = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> offsets = 0) {
  MemoryListEntryBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_offsets(offsets);
  builder_.add_contents(contents);
  builder_.add_alignment(alignment);
  builder_.add_flags(flags);
  builder_.add_domain(domain);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<MemoryListEntry> CreateMemoryListEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    MemoryDomain domain = MemoryDomain_GMEM,
    MemoryFlags flags = MemoryFlags_NONE,
    uint64_t size = 0,
    uint32_t alignment = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *contents = nullptr,
    const std::vector<uint64_t> *offsets = nullptr) {
  return hisdk::hmodel::CreateMemoryListEntry(
      _fbb,
      id,
      domain,
      flags,
      size,
      alignment,
      contents ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*contents) : 0,
      offsets ? _fbb.CreateVector<uint64_t>(*offsets) : 0);
}

struct TaskListEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_TYPE = 8,
    VT_INTERFACE = 10,
    VT_PR_ADDR_LIST = 12,
    VT_IN_ADDR_LIST = 14,
    VT_OU_ADDR_LIST = 16,
    VT_WT_ADDR_LIST = 18,
    VT_BS_ADDR_LIST = 20,
    VT_FM_ADDR_LIST = 22,
    VT_LU_ADDR_LIST = 24
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  Interface interface() const {
    return static_cast<Interface>(GetField<uint32_t>(VT_INTERFACE, 0));
  }
  const flatbuffers::Vector<uint32_t> *pr_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_PR_ADDR_LIST);
  }
  const flatbuffers::Vector<uint32_t> *in_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_IN_ADDR_LIST);
  }
  const flatbuffers::Vector<uint32_t> *ou_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_OU_ADDR_LIST);
  }
  const flatbuffers::Vector<uint32_t> *wt_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_WT_ADDR_LIST);
  }
  const flatbuffers::Vector<uint32_t> *bs_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_BS_ADDR_LIST);
  }
  const flatbuffers::Vector<uint32_t> *fm_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_FM_ADDR_LIST);
  }
  const flatbuffers::Vector<uint32_t> *lu_addr_list() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_LU_ADDR_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TYPE) &&
           verifier.Verify(type()) &&
           VerifyField<uint32_t>(verifier, VT_INTERFACE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PR_ADDR_LIST) &&
           verifier.Verify(pr_addr_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_IN_ADDR_LIST) &&
           verifier.Verify(in_addr_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_OU_ADDR_LIST) &&
           verifier.Verify(ou_addr_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_WT_ADDR_LIST) &&
           verifier.Verify(wt_addr_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BS_ADDR_LIST) &&
           verifier.Verify(bs_addr_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_FM_ADDR_LIST) &&
           verifier.Verify(fm_addr_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_LU_ADDR_LIST) &&
           verifier.Verify(lu_addr_list()) &&
           verifier.EndTable();
  }
};

struct TaskListEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(TaskListEntry::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TaskListEntry::VT_NAME, name);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(TaskListEntry::VT_TYPE, type);
  }
  void add_interface(Interface interface) {
    fbb_.AddElement<uint32_t>(TaskListEntry::VT_INTERFACE, static_cast<uint32_t>(interface), 0);
  }
  void add_pr_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> pr_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_PR_ADDR_LIST, pr_addr_list);
  }
  void add_in_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_IN_ADDR_LIST, in_addr_list);
  }
  void add_ou_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ou_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_OU_ADDR_LIST, ou_addr_list);
  }
  void add_wt_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> wt_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_WT_ADDR_LIST, wt_addr_list);
  }
  void add_bs_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> bs_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_BS_ADDR_LIST, bs_addr_list);
  }
  void add_fm_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fm_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_FM_ADDR_LIST, fm_addr_list);
  }
  void add_lu_addr_list(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> lu_addr_list) {
    fbb_.AddOffset(TaskListEntry::VT_LU_ADDR_LIST, lu_addr_list);
  }
  TaskListEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TaskListEntryBuilder &operator=(const TaskListEntryBuilder &);
  flatbuffers::Offset<TaskListEntry> Finish() {
    const auto end = fbb_.EndTable(start_, 11);
    auto o = flatbuffers::Offset<TaskListEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<TaskListEntry> CreateTaskListEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    Interface interface = Interface_NONE,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> pr_addr_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> in_addr_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> ou_addr_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> wt_addr_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> bs_addr_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> fm_addr_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> lu_addr_list = 0) {
  TaskListEntryBuilder builder_(_fbb);
  builder_.add_lu_addr_list(lu_addr_list);
  builder_.add_fm_addr_list(fm_addr_list);
  builder_.add_bs_addr_list(bs_addr_list);
  builder_.add_wt_addr_list(wt_addr_list);
  builder_.add_ou_addr_list(ou_addr_list);
  builder_.add_in_addr_list(in_addr_list);
  builder_.add_pr_addr_list(pr_addr_list);
  builder_.add_interface(interface);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<TaskListEntry> CreateTaskListEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *name = nullptr,
    const char *type = nullptr,
    Interface interface = Interface_NONE,
    const std::vector<uint32_t> *pr_addr_list = nullptr,
    const std::vector<uint32_t> *in_addr_list = nullptr,
    const std::vector<uint32_t> *ou_addr_list = nullptr,
    const std::vector<uint32_t> *wt_addr_list = nullptr,
    const std::vector<uint32_t> *bs_addr_list = nullptr,
    const std::vector<uint32_t> *fm_addr_list = nullptr,
    const std::vector<uint32_t> *lu_addr_list = nullptr) {
  return hisdk::hmodel::CreateTaskListEntry(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      type ? _fbb.CreateString(type) : 0,
      interface,
      pr_addr_list ? _fbb.CreateVector<uint32_t>(*pr_addr_list) : 0,
      in_addr_list ? _fbb.CreateVector<uint32_t>(*in_addr_list) : 0,
      ou_addr_list ? _fbb.CreateVector<uint32_t>(*ou_addr_list) : 0,
      wt_addr_list ? _fbb.CreateVector<uint32_t>(*wt_addr_list) : 0,
      bs_addr_list ? _fbb.CreateVector<uint32_t>(*bs_addr_list) : 0,
      fm_addr_list ? _fbb.CreateVector<uint32_t>(*fm_addr_list) : 0,
      lu_addr_list ? _fbb.CreateVector<uint32_t>(*lu_addr_list) : 0);
}

struct AddressListEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_MEM_ID = 6,
    VT_OFFSET = 8,
    VT_SIZE = 10
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t mem_id() const {
    return GetField<uint32_t>(VT_MEM_ID, 0);
  }
  uint64_t offset() const {
    return GetField<uint64_t>(VT_OFFSET, 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint32_t>(verifier, VT_MEM_ID) &&
           VerifyField<uint64_t>(verifier, VT_OFFSET) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct AddressListEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(AddressListEntry::VT_ID, id, 0);
  }
  void add_mem_id(uint32_t mem_id) {
    fbb_.AddElement<uint32_t>(AddressListEntry::VT_MEM_ID, mem_id, 0);
  }
  void add_offset(uint64_t offset) {
    fbb_.AddElement<uint64_t>(AddressListEntry::VT_OFFSET, offset, 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(AddressListEntry::VT_SIZE, size, 0);
  }
  AddressListEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddressListEntryBuilder &operator=(const AddressListEntryBuilder &);
  flatbuffers::Offset<AddressListEntry> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<AddressListEntry>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddressListEntry> CreateAddressListEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint32_t mem_id = 0,
    uint64_t offset = 0,
    uint64_t size = 0) {
  AddressListEntryBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_offset(offset);
  builder_.add_mem_id(mem_id);
  builder_.add_id(id);
  return builder_.Finish();
}

struct HModel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSION = 4,
    VT_TASK_LIST = 6,
    VT_ADDRESS_LIST = 8,
    VT_MEMORY_LIST = 10,
    VT_BLOBS = 12
  };
  const Version *version() const {
    return GetStruct<const Version *>(VT_VERSION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<TaskListEntry>> *task_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TaskListEntry>> *>(VT_TASK_LIST);
  }
  const flatbuffers::Vector<flatbuffers::Offset<AddressListEntry>> *address_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AddressListEntry>> *>(VT_ADDRESS_LIST);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MemoryListEntry>> *memory_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MemoryListEntry>> *>(VT_MEMORY_LIST);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Blob>> *blobs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Blob>> *>(VT_BLOBS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<Version>(verifier, VT_VERSION) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TASK_LIST) &&
           verifier.Verify(task_list()) &&
           verifier.VerifyVectorOfTables(task_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ADDRESS_LIST) &&
           verifier.Verify(address_list()) &&
           verifier.VerifyVectorOfTables(address_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MEMORY_LIST) &&
           verifier.Verify(memory_list()) &&
           verifier.VerifyVectorOfTables(memory_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BLOBS) &&
           verifier.Verify(blobs()) &&
           verifier.VerifyVectorOfTables(blobs()) &&
           verifier.EndTable();
  }
};

struct HModelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(const Version *version) {
    fbb_.AddStruct(HModel::VT_VERSION, version);
  }
  void add_task_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TaskListEntry>>> task_list) {
    fbb_.AddOffset(HModel::VT_TASK_LIST, task_list);
  }
  void add_address_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AddressListEntry>>> address_list) {
    fbb_.AddOffset(HModel::VT_ADDRESS_LIST, address_list);
  }
  void add_memory_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MemoryListEntry>>> memory_list) {
    fbb_.AddOffset(HModel::VT_MEMORY_LIST, memory_list);
  }
  void add_blobs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Blob>>> blobs) {
    fbb_.AddOffset(HModel::VT_BLOBS, blobs);
  }
  HModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HModelBuilder &operator=(const HModelBuilder &);
  flatbuffers::Offset<HModel> Finish() {
    const auto end = fbb_.EndTable(start_, 5);
    auto o = flatbuffers::Offset<HModel>(end);
    fbb_.Required(o, HModel::VT_VERSION);
    return o;
  }
};

inline flatbuffers::Offset<HModel> CreateHModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Version *version = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TaskListEntry>>> task_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AddressListEntry>>> address_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MemoryListEntry>>> memory_list = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Blob>>> blobs = 0) {
  HModelBuilder builder_(_fbb);
  builder_.add_blobs(blobs);
  builder_.add_memory_list(memory_list);
  builder_.add_address_list(address_list);
  builder_.add_task_list(task_list);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<HModel> CreateHModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Version *version = 0,
    const std::vector<flatbuffers::Offset<TaskListEntry>> *task_list = nullptr,
    const std::vector<flatbuffers::Offset<AddressListEntry>> *address_list = nullptr,
    const std::vector<flatbuffers::Offset<MemoryListEntry>> *memory_list = nullptr,
    const std::vector<flatbuffers::Offset<Blob>> *blobs = nullptr) {
  return hisdk::hmodel::CreateHModel(
      _fbb,
      version,
      task_list ? _fbb.CreateVector<flatbuffers::Offset<TaskListEntry>>(*task_list) : 0,
      address_list ? _fbb.CreateVector<flatbuffers::Offset<AddressListEntry>>(*address_list) : 0,
      memory_list ? _fbb.CreateVector<flatbuffers::Offset<MemoryListEntry>>(*memory_list) : 0,
      blobs ? _fbb.CreateVector<flatbuffers::Offset<Blob>>(*blobs) : 0);
}

inline const hisdk::hmodel::HModel *GetHModel(const void *buf) {
  return flatbuffers::GetRoot<hisdk::hmodel::HModel>(buf);
}

inline bool VerifyHModelBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hisdk::hmodel::HModel>(nullptr);
}

inline void FinishHModelBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hisdk::hmodel::HModel> root) {
  fbb.Finish(root);
}

}  // namespace hmodel
}  // namespace hisdk

#endif  // FLATBUFFERS_GENERATED_HMODEL_HISDK_HMODEL_H_
